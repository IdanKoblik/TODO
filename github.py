from git import *
import requests
import re
import os
import configparser
import json

class Github(Git):

    def __init__(self, gitHandler: GitHandler, token: str):
        super().__init__(gitHandler, token)
        self.header = {
            "Accept": "application/vnd.github+json",
            "Authorization": f"Bearer {self.token}",
            "X-GitHub-Api-Version": "2022-11-28"
        }

        self.label_name = "TODO-CLI"
        self.label_color = "33ff0a"

    def create_label(self):
        repo = self.get_full_repo_name()
        url = f"https://api.github.com/repos/{repo}/labels"

        label_url = f"{url}/{self.label_name}" 
        label_r = requests.get(label_url)
        if label_r.status_code == 200:
            return None

        body = {
            "name": f"{self.label_name}",
            "description": "Generated by TODO CLI (https://github.com/IdanKoblik/TODO)",
            "color": self.label_color
        }

        r = requests.post(url, json=body, headers=self.header)
        if (r.status_code == 201):
            self.logger.info("Successfully created new issue")
        else:
            self.logger.error(f"Error creating new issue: {r.status_code}")
            return None

    def create_issue(self, title: str, description: str):
        description += "\n **CREATED WITH `TODO` CLI**"
        self.create_label()

        body = {
            "title": title,
            "body": description,
            "labels": [f"{self.label_name}"]
        }

        repo = self.get_full_repo_name()
        url = f"https://api.github.com/repos/{repo}/issues"
    
        r = requests.post(url, json=body, headers=self.header)
        if (r.status_code == 201):
            self.logger.info("Successfully created new issue")
            content = json.loads(r.text)
            return content["html_url"]
        else:
            self.logger.error(f"Error creating new issue: {r.status_code}")
            return None

    def get_full_repo_name(self):
        config_path = self.gitHandler.get_git_repo_path() / 'config'
        
        if not os.path.exists(config_path):
            print("Git config file not found.")
            return None
        
        config = configparser.ConfigParser()
        config.read(config_path)
        
        try:
            remote_sections = [
                'remote "origin"',
                *[sect for sect in config.sections() if sect.startswith('remote "') and sect != 'remote "origin"']
            ]
            
            for section in remote_sections:
                if section in config.sections():
                    url = config[section]['url']
                    
                    patterns = [
                        r'https://(?:www\.)?github\.com/([^/]+)/([^/\.]+)(?:\.git)?',
                        r'git@github\.com:([^/]+)/([^/\.]+)(?:\.git)?'
                    ]
                    
                    for pattern in patterns:
                        match = re.search(pattern, url)
                        if match:
                            return f"{match.group(1)}/{match.group(2)}"
            
            print("Could not extract repository name from config.")
            return None
        
        except Exception as e:
            print(f"Error extracting repository name: {e}")
            return None